{"version":3,"sources":["Components/atoms.tsx","Components/CreateToDo.tsx","Components/ToDo.tsx","Components/ToDoList.tsx","App.tsx","index.tsx","theme.ts"],"names":["Categories","categoryState","atom","key","default","TO_DO","toDoState","toDoSelector","selector","get","toDos","category","filter","toDo","customCategoryState","CreateToDo","useForm","register","handleSubmit","setValue","setToDos","useSetRecoilState","useRecoilValue","onSubmit","curVal","text","id","Date","now","required","placeholder","ToDo","setTodos","onClick","event","name","currentTarget","oldToDos","targetIndex","findIndex","todo","newToDo","newToDos","splice","console","log","DOING","DONE","ToDoList","todoSelect","useRecoilState","setCategory","setCustomCategory","type","inputVal","document","querySelector","value","option","createElement","select","appendChild","style","padding","onInput","map","GlobalStyle","createGlobalStyle","App","ReactDOM","createRoot","getElementById","render","StrictMode","theme","bgColor","textColor","accentColor","themeColor","chartColor","darkModeColor","listBgColor"],"mappings":"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","file":"static/js/main.b51163be.chunk.js","sourcesContent":["import { atom, selector } from \"recoil\";\r\n\r\nexport const enum Categories {\r\n  \"TO_DO\" = \"TO_DO\",\r\n  \"DOING\" = \"DOING\",\r\n  \"DONE\" = \"DONE\",\r\n}\r\n\r\nexport interface IToDo {\r\n  text: string;\r\n  id: number;\r\n  category: Categories;\r\n}\r\n\r\nexport const categoryState = atom<Categories>({\r\n  key: \"category\",\r\n  default: Categories.TO_DO,\r\n});\r\n\r\nexport const toDoState = atom<IToDo[]>({\r\n  key: \"toDo\",\r\n  default: [],\r\n});\r\n\r\nexport const toDoSelector = selector({\r\n  key: \"toDoSelector\",\r\n  get: ({ get }) => {\r\n    const toDos = get(toDoState);\r\n    const category = get(categoryState);\r\n    return toDos.filter((toDo) => toDo.category === category);\r\n  },\r\n});\r\n\r\nexport const customCategoryState = atom({\r\n  key:\"customCategory\",\r\n  default:[],\r\n})\r\n","import { useForm } from \"react-hook-form\";\r\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\r\nimport { categoryState, toDoState } from \"./atoms\";\r\n\r\n\r\ninterface IForm {\r\n  toDo: string;\r\n}\r\n\r\nconst CreateToDo = () => {\r\n  const { register, handleSubmit, setValue } = useForm<IForm>();\r\n  const setToDos = useSetRecoilState(toDoState);\r\n  const category = useRecoilValue(categoryState);\r\n\r\n  const handleValid = ({ toDo }: IForm) => {\r\n    setToDos((curVal) => [\r\n      { text: toDo, id: Date.now(), category:category },\r\n      ...curVal,\r\n    ]);\r\n    setValue(\"toDo\", \"\"); // state change & value initialize\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit(handleValid)}>\r\n        <input\r\n          {...register(\"toDo\", { required: \"please write to do\" })}\r\n          placeholder=\"Write a to do\"\r\n        />\r\n        <button>Add</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateToDo;\r\n","import { useRecoilValue, useSetRecoilState } from \"recoil\";\r\nimport { Categories, customCategoryState, IToDo, toDoState } from \"../Components/atoms\";\r\n\r\nconst ToDo = ({ text, category, id }: IToDo) => {\r\n  const setTodos = useSetRecoilState(toDoState);\r\n  const onClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    const {\r\n      currentTarget: { name },\r\n    } = event;\r\n    setTodos((oldToDos) => {\r\n      const targetIndex = oldToDos.findIndex((todo) => todo.id === id);\r\n      const newToDo = { text, id, category: name } as any;\r\n    //   const changeToDo = [\r\n    //     ...oldToDos.slice(0, targetIndex),\r\n    //     newToDo,\r\n    //     ...oldToDos.slice(targetIndex + 1),\r\n    //   ];\r\n      //splice(start,removeCount,addElement) // removeCount=0 : add to that position\r\n      const newToDos = [...oldToDos];\r\n      newToDos.splice(targetIndex,1,newToDo); \r\n      console.log(newToDo);\r\n      return newToDos;\r\n    });\r\n  };\r\n\r\n  const customCategory = useRecoilValue(customCategoryState);\r\n\r\n  return (\r\n    <li>\r\n      <span>{text}</span>\r\n      {category !== Categories.DOING && (\r\n        <button name={Categories.DOING} onClick={onClick}>\r\n          Doing\r\n        </button>\r\n      )}\r\n      {category !== Categories.TO_DO && (\r\n        <button name={Categories.TO_DO} onClick={onClick}>\r\n          ToDo\r\n        </button>\r\n      )}\r\n      {category !== Categories.DONE && (\r\n        <button name={Categories.DONE} onClick={onClick}>\r\n          Done\r\n        </button>\r\n      )}\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default ToDo;\r\n","import React from \"react\";\r\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from \"recoil\";\r\nimport { Categories, categoryState, customCategoryState, toDoSelector, toDoState } from \"./atoms\";\r\nimport CreateToDo from \"./CreateToDo\";\r\nimport ToDo from \"./ToDo\";\r\n\r\nconst ToDoList = () => {\r\n  // const toDos = useRecoilValue(toDoState);\r\n  const todoSelect = useRecoilValue(toDoSelector);\r\n  const [category, setCategory] = useRecoilState(categoryState);\r\n  const onInput = (event: React.FormEvent<HTMLSelectElement>) => {\r\n    setCategory(event.currentTarget.value as any);\r\n  };\r\n  const setCustomCategory = useSetRecoilState(customCategoryState);\r\n\r\n  const AddCategory = () => {\r\n    const inputVal = document.querySelector(\"input\")?.value;\r\n    setCustomCategory(inputVal as any);\r\n    let option: any = document.createElement(\"option\");\r\n    option.text = inputVal;\r\n    option.value = inputVal;\r\n    const select = document.querySelector('select');\r\n    select?.appendChild(option);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>To Dos</h1>\r\n      <hr />\r\n\r\n      <div>\r\n        <input id=\"input-add-categroy\" type=\"text\" />\r\n        <button onClick={AddCategory} id=\"btn-add-category\">\r\n          Add Category\r\n        </button>\r\n      </div>\r\n\r\n      <div style={{ padding: \"10px\" }}></div>\r\n      <select value={category} onInput={onInput}>\r\n        <option value={Categories.TO_DO}>To Do</option>\r\n        <option value={Categories.DOING}>Doing</option>\r\n        <option value={Categories.DONE}>Done</option>\r\n      </select>\r\n\r\n      <CreateToDo />\r\n      {todoSelect.map((todo) => (\r\n        <ToDo key={todo.id} {...todo} />\r\n        // <ToDo key={todo.id} text={todo.text} category={todo.category} id={todo.id} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ToDoList;\r\n","import {createGlobalStyle} from \"styled-components\";\nimport ToDoList from './Components/ToDoList';\nconst GlobalStyle = createGlobalStyle`\n  html, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n  border-spacing: 0;\n}\n*{\n  box-sizing: border-box;\n}\nbody{\n  font-family: 'Source Sans Pro', sans-serif;\n  \n}\na{\n  text-decoration: none;\n  color:inherit;\n}\n`;\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n\t  <ToDoList />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { RecoilRoot } from \"recoil\";\nimport { ThemeProvider } from \"styled-components\";\nimport App from \"./App\";\nimport { darkTheme } from \"./theme\";\n\nconst root = ReactDOM.createRoot(\n  document.getElementById(\"root\") as HTMLElement\n);\n\nroot.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={darkTheme}>\n        <App />\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>\n);\n","import { DefaultTheme } from \"styled-components\";\r\n\r\n\r\nexport const darkTheme: DefaultTheme = {\r\n  bgColor: \"#222f3e\",\r\n  textColor: \"#c8d6e5\",\r\n  accentColor: \"#0abde3\",\r\n  themeColor : \"black\",\r\n  chartColor : \"dark\",\r\n  darkModeColor : \"yellow\",\r\n  listBgColor : \"parent\",\r\n};\r\n"],"sourceRoot":""}